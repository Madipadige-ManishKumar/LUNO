from huggingface_hub import InferenceClient
import json
from apikey import apikey
def history_manager(text):
    last_15000_chars = text[-15000:]
     # Find the position of the first occurrence of "My query"
    position = last_15000_chars.find("My query")

# If "My query" is found, slice the string from that position onwards
    if position != -1:
        result_text = last_15000_chars[position:]
    else:
        result_text = last_15000_chars  # If "My query" is not found, keep the text as is

    return result_text

def searcher(query):
    
    # f1=open("C:\\Luno\\full.txt","a")
    # f2=open("C:\\Luno\\full.txt","r")
    print("in searcher")
    client = InferenceClient(api_key=apikey)
    # his=f2.read()
    # f=open("C:\\Luno\\output.txt","w")
    # his=history_manager(his)+query
    # print("The History",his)
    # print()
    # print()
    try:
        # Request the chat completions
        response = client.chat.completions.create(
            model="mistralai/Mistral-7B-Instruct-v0.3",
            messages=[{"role": "user", "content": query}],
            max_tokens=500  
        )

        # Extract the content from the response
        content = response.get("choices", [{}])[0].get("message", {}).get("content", "")

        if content:
            print("\n--- Generated Response ---\n")
            print(content)
            import time
            time.sleep(10)
            # Ensure trailing or leading spaces are removed
            # f.write(content.strip())
            # f1.write("My query: " + query + "\n")
            # f1.write("your Answer: " + content.strip() + "\n")
            print("\n--------------------------\n")
            return content.strip()
        else:
            print("No content generated by the model.")

    except Exception as e:
        print(f"An error occurred: {e}")



def summarizer(query):
    client = InferenceClient(api_key=apikey)
    result = ""  # Initialize result variable to capture output
    
    try:
        # Request the chat completions
        response = client.chat.completions.create(
            model="mistralai/Mistral-7B-Instruct-v0.3",
            messages=[{"role": "user", "content": query}],
            max_tokens=500  
        )

        # Extract the content from the response
        content = response.get("choices", [{}])[0].get("message", {}).get("content", "")

        if content:
            print("\n--- Generated Response ---\n")
            # Ensure trailing or leading spaces are removed
            print("\n--------------------------\n")
            return content.strip()
        else:
            print("No content generated by the model.")

    except Exception as e:
        print(f"An error occurred: {e}")

# Example call to searcher function
# print(searcher("Write a java code  to find second largest number from an array"))
